#!/usr/bin/env python
"""lockbox

Usage:
    lockbox <cmd> [<input>] [options]
    lockbox --version

Arguments:
    cmd    encrypt or decrypt
    input  file to be used for input
           specify '-' to use stdin

Options:
    -s STRING --string=STRING   STRING to be used as the input data for encrypting/decrypting
    -o FILE --output=FILE       file to be used for outputted data
                                specifying an output file with a '.png'
                                extension will write a QR code to FILE

Without -o FILE given, lockbox will display data to stdout

Be careful using the -s STRING option on the command line as your unencrypted plaintext may be stored in your history. Also, when using the -s option, any data provided through stdin will be ignored.
"""
import getpass
import sys

from docopt import docopt
from blessings import Terminal

from lockbox import (encrypt,
                     decrypt,
                     encrypt_file,
                     decrypt_file,
                     LockBoxException,
                     )
from lockbox._version import get_versions


VERSION = get_versions()['version']
ENCRYPT = 'encrypt'
DECRYPT = 'decrypt'

term = Terminal()

def main(cmd, infile, outfile, string=None):
    if cmd not in (ENCRYPT, DECRYPT):
        print(term.red('{} is not a valid cmd. Must be either encrypt or decrypt'.format(cmd)))
        print(__doc__)
        return

    if string and infile:
        print(term.red('Cannot define a STRING and provide an input file or stdin data at the same time.'))
        print(__doc__)

    if string:
        string = string.encode('utf-8')

    stdin_data = None
    if not string and (not infile or infile == '-'):
        stdin_data = sys.stdin.read().encode('utf-8')

    passphrase = getpass.getpass('Enter passphrase: ').encode('utf-8')

    if cmd == ENCRYPT:
        confirm_passphrase = getpass.getpass('Confirm passphrase: ').encode('utf-8')

        if passphrase != confirm_passphrase:
            print('passphrases do not match')
            return

        if stdin_data or string:
            stdout_data = encrypt(passphrase, stdin_data or string, outfile=outfile)
            if stdout_data:
                print(stdout_data.decode('utf-8'))
        else:
            encrypt_file(passphrase, infile, output_file=outfile)
    elif cmd == DECRYPT:
        if stdin_data or string:
            stdout_data = decrypt(passphrase, stdin_data or string, outfile=outfile)
            if stdout_data:
                print(stdout_data.decode('utf-8'))
        else:
            decrypt_file(passphrase, infile, output_file=outfile)


if __name__ == '__main__':
    args = docopt(__doc__, version=VERSION)

    if args['--version']:
        print(VERSION)
    else:
        cmd = args['<cmd>'].lower()
        infile = args['<input>']
        outfile = args['--output']
        string = args['--string']

        try:
            main(cmd, infile, outfile, string=string)
        except LockBoxException as e:
            print(term.red(str(e)))
